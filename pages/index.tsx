import Head from "next/head";
import SpeechRecognition, {
  useSpeechRecognition,
} from "react-speech-recognition";
import { Configuration, OpenAIApi } from "openai";
import { useEffect, useState } from "react";

const getDavinciResponse = async (clientText: string) => {
  const configuration = new Configuration({
    organization: process.env.NEXT_PUBLIC_OPENAI_ORGANIZATION_ID,
    apiKey: process.env.NEXT_PUBLIC_OPENAI_KEY,
  });

  const openai = new OpenAIApi(configuration);
  const options = {
    model: "text-davinci-003",
    prompt: `From the following sentence, fix grammatical errors and return the new fixed sentence.\nSentence: ${clientText}?`,
    temperature: 0,
    max_tokens: 60,
    top_p: 1,
    frequency_penalty: 0.5,
    presence_penalty: 0,
  };

  const response = await openai.createCompletion(options);
  let botResponse = "";
  response.data.choices.forEach(({ text }) => {
    botResponse += text;
  });

  return botResponse;
};

export default function Home() {
  const [correct, setCorrect] = useState("");
  const { transcript, finalTranscript, listening, resetTranscript } =
    useSpeechRecognition();

  const handleSpeak = () => {
    const synth = globalThis.speechSynthesis;
    if (synth) {
      const utterThis = new SpeechSynthesisUtterance(correct);
      utterThis.rate = 0.7;
      utterThis.pitch = 1;
      synth.speak(utterThis);
    }
  };

  useEffect(() => {
    if (!transcript.length) {
      setCorrect("");
    }
  }, [transcript]);

  useEffect(() => {
    if (listening) return;
    if (!finalTranscript.length) return;
    getDavinciResponse(finalTranscript).then(setCorrect);
  }, [finalTranscript, listening]);

  return (
    <>
      <Head>
        <title>Spoken Correction OpenAI</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>Spoken Correction</h1>
        <p>eg: there&apos;s something new?</p>
        <p>Microphone: {listening ? "on" : "off"}</p>
        <button onClick={SpeechRecognition.startListening as any}>
          Start Record
        </button>
        <button onClick={SpeechRecognition.stopListening}>Stop Record</button>
        <button onClick={resetTranscript}>Reset</button>
        <p>{transcript}</p>
        {correct && (
          <>
            <p>Correction:</p>
            <p>{correct}</p>
            <div>
              <button onClick={handleSpeak}>ðŸ”Š</button>
            </div>
          </>
        )}
      </main>
    </>
  );
}
